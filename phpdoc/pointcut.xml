<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<chapter xml:id="aop.pointcut" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Pointcut syntax</title>
 <para>
  Pointcuts are a way to describe where advices should be run in the PHP code.
 </para>
 <para>
  Pointcuts can describe functions, method calls (public, protected, private, static or not) and properties operations
  (read, write, public, protected or private).
 </para>
 <para>
  Pointcuts can contain namespaces if needed.
 </para>
 <para>
  The special character * (wildcard) can be use to match any number of any character for a given element (namespace element,
  function name, method name, class name or property name).
 </para>
 <para>
  Two wildcards ** will match any number of any character for the namespace path.
 </para>
 <para>
  When describing a function call or a method call, pointcuts must end with parenthesis (). When describing a property
  operation, pointcuts should contain only the class and property name, with no parenthesis.
 </para>
 <warning>
  <para>
   As PHP itself, pointcuts are case sensitive while describing properties but are case insensitive while describing
   functions, methods, classes, interfaces or traits.
  </para>
 </warning>
 <para>
  <example><title>Function calls</title>
   <para>
    The following example shows several syntax for describing a function call.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
//will match foo(), Foo() and fOo(), but NOT bar\foo(), foo\bar(), bar\foo() or foo\foo()
$pointcut = 'myFunction()';

//will match foo(), fooo(), fooBar() and so on, but not foo\bar() or bar\foo()
$pointcut = 'foo*()';

//will match foobar(), foooBar(), someBar() and so on, but not foo\bar() or bar\fooBar()
$pointcut = '*bar()';

//will match foo\bar(), but NOT foo\foo\bar();
$pointcut = 'foo\\bar()';

//will match foo\bar(), foo\bigbar(), foo\barfoobar() but NOT foo\bar\bar()
$pointcut = 'foo\\b*()';

//will match foobar\anything(), foobarAnything\anything() but NOT foobar\foo\bar();
$pointcut = 'foobar*\\*()';

//will match some\foo\bar(), some\other\bar() but NOT foo\bar() of some\longer\foo\bar()
$pointcut = '*\\*\\bar()';

//will match any\namespace\where\is\foo() including foo()
$pointcut = '**\\foo()';

//will match startWithFooSomething\anything\else\bar() including startWithFoo\bar();
$pointcut = 'StartWithFoo*\\**\\bar()'; //same as 'StartWithFoo**\\bar()';
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
